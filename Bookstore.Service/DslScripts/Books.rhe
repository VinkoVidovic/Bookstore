Module Bookstore
{
    Entity Book
    {
        ShortString Code { Unique; Autocode; Required; }
        ShortString Title { Required; }
        Integer NumberOfPages;
        Reference Author Bookstore.Person;
        Reference Genre Bookstore.Genre;

        DateTime Created { CreationTime; }
        DateTime UpdatedAt { ModificationTimeOf Bookstore.Book.Title; }

		ItemFilter ContainsForbiddenTitle 'book => book.Title.Contains("The Theory and Practice of Oligarchical Collectivism")';
		Lock ContainsForbiddenTitle 'Thought Police are on their way!';

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity". Please use "curiosity" instead.';

        ComposableFilterBy LongBooks '(query, repository, parameter) =>
            {
                return query.Where(item => item.NumberOfPages >= 500);
            }';

        FilterBy ComplexSearch '(repository, parameter) =>
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages && item.NumberOfPages <= parameter.MaximumPages);
            if (parameter.ForeignBooksOnly == true)
                query = query.Where(item => item.Extension_ForeignBook.ID != null);
            if (parameter.FantasyBooksOnly == true)
                query = query.Where(item => item.Genre.ID == Bookstore.Genre.Fantasy);
            Book[] books = query.ToSimple().ToArray();

            if (parameter.MaskTitles == true)
                foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    book.Title = book.Title.First() + "***" + book.Title.Last();

            return books;
        }';

        Logging { AllProperties; }
    }

    Entity Person
    {
        ShortString Name;
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text;
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
        Take NumberOfBookTopics 'Extension_BookInfo.NumberOfBookTopics';
    }

    SqlQueryable BookInfo
        "
            SELECT
                b.ID,
                NumberOfBookTopics = COUNT(c.ID)
            FROM
                Bookstore.Book b
                LEFT JOIN Bookstore.BookTopic c ON c.BookID = b.ID
            GROUP BY
                b.ID
        "
    {
        Extends Bookstore.Book;
        Integer NumberOfBookTopics;

        AutodetectSqlDependencies;
    }

    Parameter LongBooks
    {
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Integer MaximumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
        Bool FantasyBooksOnly;
    }
}